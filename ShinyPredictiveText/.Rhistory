ylab = "Residuals",
main = "Automatic Transmission Residuals")
abline(0, 0)
manFit$coefficients[1]
range(mtcars$disp)
range(mtcars$wt)
manFit$coefficients
manFit$coefficients[1]
manFit$coefficients[2]
manFit$coefficients[3]
mean(mtcars$wt)
range(mtcars$disp)
470-75
?predict
df <- data.frame(wt = numeric(), disp = numeric())
df <- rbind(df, wt = 3.2175, disp = 100)
predict(manFit, df)
predict(manFit)
plot(predict(manFit))
summary(autoFit)
newdata = data.frame(wt = 2.3, disp = 100)
predict(autoFit, newdata)
manPredict = data.frame(wt = numeric(), disp = numeric())
manPredict <- rbind(manPredict, wt = mean(mtcars$wt), disp = 75 + i)
manPredict <- rbind(manPredict, wt = mean(mtcars$wt), disp = 75 + 0)
View(manPredict)
View(manPredict)
manPredict <- data.frame(wt = numeric(), disp = numeric())
manPredict <- rbind(manPredict, wt = mean(mtcars$wt), disp = 75 + 0)
View(manPredict)
View(manPredict)
manPredict <- rbind(manPredict, wt = mean(mtcars$wt), disp = 75 + 0)
df <- data.frame(Description = character(), RSquared = numeric(), Correlation = numeric())
df <- rbind(df, data.frame(Description = "Displacement", RSquared = summary(lm(mpg ~ disp, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$disp)))
View(df)
View(df)
manPredict <- data.frame(Index = numeric(), wt = numeric(), disp = numeric())
df <- rbind(manPredict, data.frame(Index = 1, wt = mean(mtcars$wt), disp = 100))
manPredict <- data.frame(Index = numeric(), wt = numeric(), disp = numeric())
manPredict <- rbind(manPredict, data.frame(Index = (i + 1), wt = mean(mtcars$wt), disp = 75 + i))
manPredict <- rbind(manPredict, data.frame(Index = (0 + 1), wt = mean(mtcars$wt), disp = 75 + 0))
predict(manFit, manPredict)
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
i = 0
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
rbind <- (manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
i = 1
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
View(manPredict)
View(manPredict)
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
plot(manPredict)
plot(manPredict$Prediction)
plot(manPredict$Prediction, manPredict$disp)
plot(manPredict$disp, manPredict$Prediction)
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
autoPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
AutoPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
plot(autoPredict$disp, autoPredict$Prediction)
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
autoPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
autoPredict <- rbind(autoPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
plot(autoPredict$disp, autoPredict$Prediction)
plot(manPredict$disp, manPredict$Prediction)
manPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
manPredict <- rbind(manPredict, data.frame(Prediction = predict(manFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
autoPredict <- data.frame(Prediction = numeric(), wt = numeric(), disp = numeric())
for (i in 1:395)
{
newdata = data.frame(wt = mean(mtcars$wt), disp = (75 + i))
autoPredict <- rbind(autoPredict, data.frame(Prediction = predict(autoFit, newdata), wt = mean(mtcars$wt), disp = (75 + i)))
}
plot(manPredict$disp, manPredict$Prediction)
plot(autoPredict$disp, autoPredict$Prediction)
df <- data.frame(Description = character(), RSquared = numeric(), Correlation = numeric())
df <- rbind(df, data.frame(Description = "Displacement", RSquared = summary(lm(mpg ~ disp, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$disp)))
df <- rbind(df, data.frame(Description = "Horsepower", RSquared = summary(lm(mpg ~ hp, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$hp)))
df <- rbind(df, data.frame(Description = "Rear Axle Ratio", RSquared = summary(lm(mpg ~ drat, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$drat)))
df <- rbind(df, data.frame(Description = "Weight", RSquared = summary(lm(mpg ~ wt, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$wt)))
df <- rbind(df, data.frame(Description = "1/4 Mile Time", RSquared = summary(lm(mpg ~ qsec, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$qsec)))
df <- rbind(df, data.frame(Description = "V/S", RSquared = summary(lm(mpg ~ vs, data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$vs)))
df <- rbind(df, data.frame(Description = "Transmission", RSquared = summary(lm(mpg ~ factor(am), data = mtcars))$r.squared, Correlation = cor(mtcars$mpg, mtcars$am)))
df <- rbind(df, data.frame(Description = "Gears", RSquared = summary(lm(mpg ~ gear, data = mtcars))$r.squared))
t.test(mtcars[mtcars$am == 0, ]$mpg, mtcars[mtcars$am == 1, ]$mpg)
testRes <- t.test(mtcars[mtcars$am == 0, ]$mpg, mtcars[mtcars$am == 1, ]$mpg)
testRes
testRes$p.value
auto <- mtcars %>% select(mpg, am == 1)
library(dplyr)
auto <- mtcars %>% select(mpg, am == 1)
auto <- mtcars %>% filter(am = 1)
mtcars$am == 1
auto <- mtcars %>% filter(am == 1)
auto <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(autoFit, data.frame(wt = wt, disp = disp)))
head(auto)
plot(auto$predict)
auto <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
plot(auto$predict)
plot(auto$predict, auto$disp)
auto <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
par(mfrow = c(1, 1))
plot(auto$predict, auto$disp)
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
plot(auto$disp, auto$predict, col = "blue", type = "l")
lines(man$disp, man$predict)
plot(man$disp, man$predict, type = "l")
lines(auto$disp, auto$predict)
plot(man$disp, man$predict, type = "l",
ylim = c(10, 28))
lines(auto$disp, auto$predict)
plot(man$disp, man$predict, type = "l",
ylim = c(15, 28))
lines(auto$disp, auto$predict)
plot(man$disp, man$predict, type = "l", pch = 3
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 3
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 3,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 7,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 4,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 5,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 5,
ylim = c(15, 28), lwd = 2
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 5,
ylim = c(15, 28), lwd = 2,
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", lty = 5,
ylim = c(15, 28), pch = 22,
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict)
legend("topright", c("Manual", "Automatic"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", col = "blue",
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", col = "blue",
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), lwd = 1)
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", col = "blue",
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), lwd = 1, pch = c(1, 2))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "l", col = "blue",
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), lwd = 1, pch = c(1, 2))plot(man$disp, man$predict, type = "l", col = "blue", pch = 1,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2))
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2))
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2))
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2))
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2))
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
plot(man$disp, man$predict, type = "l", col = "blue", pch = 1, type = "o", lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
```
plot(man$disp, man$predict, type = "o", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2)
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
plot(man$disp, man$predict, type = "o", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2, type = "o")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
mean(man$mpg - auto$mpg)
mean(man$mpg) - mean(auto$mpg)
mean(manFit$mpg) - mean(autoFit$mpg)
mean(man$predict) - mean(autoFit$mpg)
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
mean(man$predict)
mean(auto$predict)
(mean(man$predict) - mean(auto$predict))
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
manFit <- lm(mpg ~ wt + disp, data = mtcars[mtcars$am == 1, ])
autoFit <- lm(mpg ~ wt + disp, data = mtcars[mtcars$am == 0, ])
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
auto <- data.frame() %>% mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
data(mtcars)
auto <- data.frame() %>% mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
auto <- data.frame()
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
View(auto)
View(auto)
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(mtcars[mtcars$am == 0,]$wt), disp = disp)))
auto = mtcars
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
View(auto)
rm(auto)
auto <- mtcars
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "o", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2, type = "o")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
mean(auto$predict)
mean(ma$predict)
mean(man$predict)
mean(ma$predict)auto <- mtcars
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(mtcars[mtcars$am == 0,]$wt), disp = disp)))
man <- mtcars
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(mtcars[mtcars$am == 1, ]$wt), disp = disp)))
auto <- mtcars
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(mtcars[mtcars$am == 0,]$wt), disp = disp)))
auto <- mtcars[mtcars$wt == 0, ]
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(mtcars[mtcars$am == 0,]$wt), disp = disp)))
auto <- mtcars[mtcars$wt == 0, ]
auto <- mtcars[mtcars$am == 0, ]
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
rm(auto, man)
auto <- mtcars[mtcars$am == 0, ]
auto <- mtcars %>% filter(am == 0) %>% mutate(predict = predict(autoFit, data.frame(wt = mean(auto$wt), disp = disp)))
man <- mtcars[mtcars$am == 1, ]
man <- mtcars %>% filter(am == 1) %>% mutate(predict = predict(manFit, data.frame(wt = mean(man$wt), disp = disp)))
par(mfrow = c(1, 1))
plot(man$disp, man$predict, type = "o", col = "blue", pch = 1, lwd = 2,
ylim = c(15, 28),
xlab = "Displacement",
ylab = "Predicted MPG",
main = "Predicted MPG with average Weight")
lines(auto$disp, auto$predict, col = "red", pch = 2, lwd = 2, type = "o")
legend("topright", c("Manual", "Automatic"), col = c("blue", "red"), pch = c(1, 2), lwd = 1)
library(swirl)
swirl()
library(kernlab)
download.packages(kernlab)
download.packages("kernlab")
library(caret)
download.packages(caret)
download.packages("caret")
download.packages(ggplot2)
download.packages("caret")
download.packages(caret)
library(caret)
download.packages(dplyr)
download.packages("dplyr")
install.packages("caret", repos = "https://cran.r-project.org/src/contrib/caret_6.0-68.tar.gz", type = "source")
install.packages("caret", repos = "https://cran.r-project.org/src/contrib/caret_6.0-68.tar.gz", type = "source")
install.packages("caret", repos = "https://cran.r-project.org/src/contrib/caret_6.0-68.tar.gz", type = "source")
install.packages("C:\\caret_6.0-68.tar.gz", repos = NULL, type = "source")
install.packages("caret")
library(caret)
library(kernlab)
download.packages("kernlab")
install.packages("kernlab", type="source")
library(kernlab)
data(spam)
names(spna)
names(spam)
updateR()
install_from_swirl()
installr
install.packages("installr")
installR()
library(installr)
installR()
updateR()
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
train <- span[inTrain]
train <- spam[inTrain]
train <- spam[inTrain,]
modelFit <- train(type ~ ., data = train, method="glm")
install.packages("e1071")
modelFit <- train(type ~ ., data = train, method="glm")
modelFit
modelFit$finalModel
test <- spam[-inTrain,]
predictions <- predict(modelFit, newdata=test)
predictions
confusionMatrix(predictions, spam$type)
confusionMatrix(predictions, test$type)
set.seed(32323)
folds <- createFolds(y= spam$type, k = 10, list = TRUE, returnTrain = TRUE)
folds
length(folds)
sapply(folds,length)
folds[[1]][1:10]
?createFolds
library(caret)
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y = faithful$waiting, p = 0.5, list = FALSE)
trainFaith <- faithful[inTrain]
testFaith <- faithful[-inTrain]
head(trainFaith)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19, col = "blue", xlab = "Waiting", ylab = "Duration")
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1)
lines(trainFaith$waiting, lm1$fitted.values, lwd=3)
libray(ISLR)
library(ISLR)
library(caret)
download.packages("ISLR")
install.packages("ISLR")
library(ISLR)
data("Wage")
library(ggplot2)
library(caret)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
library(AppliedPredictiveModeling)
library(caret
)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, color = training)
plot(training$CompressiveStrength, color = training$Cement)
plot(training$CompressiveStrength, color = training$FlyAsh)
plot(training$CompressiveStrength, color = "blue")
qplot(training$CompressiveStrength, colour=FlyAsh, data=training)
plot(mixtures$Superplasticizer)
hist(mixtures$Superplasticizer)
table(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
search()
library(caret)
search()
q()
values = data.frame(sampleSize = c(20,20,20,20,40,40,40,40,50,50,50,50,60,60,60,60,75,75,75,75,100,100,100,100), ngramSize = c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4))
source('~/RWorkspace/Capstone Project/getNgram.R')
sapply(1:32, function(x) {getNgram(sampleSize = values$sampleSize[x], phraseLength = values$ngramSize[x])})
setwd("~/RWorkspace/Capstone Project")
sapply(1:32, function(x) {getNgram(sampleSize = values$sampleSize[x], phraseLength = values$ngramSize[x])})
